<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 萨雷斯煜のDev Note</title>
        <link>https://dev.hanry.top/posts/</link>
        <description>Recent content in Posts on 萨雷斯煜のDev Note</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 28 Sep 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://dev.hanry.top/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>SwiftUI文本</title>
            <link>https://dev.hanry.top/posts/2020/09/swiftui%E6%96%87%E6%9C%AC/</link>
            <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dev.hanry.top/posts/2020/09/swiftui%E6%96%87%E6%9C%AC/</guid>
            <description>如果你之前有使用过UIKit，SwiftUI的Text控制与UIKit中的UILabel非常相似。这是一个能够显示一行或多行文字的视图。这个 Text控制无法编辑，不过对于在萤幕上呈现唯读的资讯非常好用。举例来说，你想要在画面上呈现一个讯息，你可以使用Text 来实作。
本章，我将告诉你如何以Text 来呈现资讯。你将会学到如何运用不同颜色、字体、背景与旋转效果来自订文字。
建立新项目来体验SwiftUI 首先，开启Xcode并使用Single View App 模板来建立一个新项目，输入项目名称，我设定为SwiftUIText，不过你可以使用任何的名称。在组织名称（ organization name），你可以设定为你的公司或组织的名字。组织识别码（organization identifier）是App的唯一识别码，这里我使用com.appcoda，不过这里需要填入你自己的内容，如果你有一个网站，则可以将网域名称以倒过来写的方式作为设定。要使用SwiftUI的话，则需要在User Interface选项勾选SwiftUI，点选 Next并选取一个资料夹来建立项目。
储存完项目之后，Xcode即会载入ContentView.swift 档，并显示一个设计画布（ design canvas ）与预览画布（preview canvas）。如果你没有见到这个画布，你可以至Xcode选单，并选取 Editor &amp;gt; Canvas来启用它。
Xcode预设会在 ContentView.swift上建立一些SwiftUI程式码。不过，这个预览画布不会渲染（render）App预览画面。你必须点选Resume 按钮才能看到这个预览画面。按下按钮之后，Xcode会依照你在模拟器选项（例如iPhone 11 Pro）中的选择来将预览画面渲染在模拟器中。为了让程式编辑器与画布能显示，你可以隐藏项目导览器（project navigator ）与工具面板来释放更多空间。
简单文字的呈现 在ContentView 所产生的简单程式已经告诉你如何显示一行文字。程式初始化一个 Text 并将要放的文字（例如Hello World）作为参数来传传递，显示如下：
Text(&amp;#34;Hello World&amp;#34;) 如此，预览画布即会在萤幕上显示 Hello World。这是建立一个文字视图的基本语法。你可以任意变更文字内容，画布会即时显示变更的结果。
变更字体与颜色 在SwiftUI，你可以呼叫一些方法，也就是所谓的修饰器（Modifiers）来变更属性（例如颜色）。譬如说，你想要粗体字。你可以使用名为fontWeight的修饰器，并指定你想要的字体粗细（例如.bold）：
Text(&amp;#34;Stay Hungry. Stay Foolish.&amp;#34;).fontWeight(.bold) 你可以使用点语法（dot syntax）来存取修饰器。当你输入一个点符号时，Xcode则出现你可能会用到的修饰器或值。举例来说，当你在fontWeight修饰器，输入一个点符号时，你会见到不同的字体粗细选项，你可以选取bold来使用粗体字。如果你想要更粗一点，则可以选取heavy或black。
透过fontWeight 修饰器的呼叫，并选取 .bold的值，它会回传一个加上粗体字的视图。SwiftUI有趣的是，你可以进一步串连其他修饰器。譬如说，你想要大一点的粗体字，程式可以修改如下：
Text(&amp;#34;Stay Hungry. Stay Foolish.&amp;#34;).fontWeight(.bold).font(.title) 因为可能会串连多个修饰器，我们通常会将以上的程式写成如下的格式：
Text(&amp;#34;Stay Hungry. Stay Foolish.&amp;#34;) .fontWeight(.bold) .font(.title) 这个功能是一样的，不过我相信你会发现到以上的程式更容易阅读。我们将继续在本书中使用这样的程式写法。
font修饰器可以让你变更字体属性。在上面的程式中，我们指定使用title字体以放大文字。SwiftUI内有几个内建的字体样式，包括title、largeTitle、body等等。如果你想要加大字体大小，则可以将.title改成.largeTitle。
提示：你可以参考这份文件（https://developer.apple.com/documentation/swiftui/font）来找出所有font修饰器所支援的值。
你也可以使用 font修饰器来指定字体设计，譬如说，你想要字体圆润。你可以将修饰器撰写如下：
.font(.system(.largeTitle, design: .</description>
            <content type="html"><![CDATA[<p>如果你之前有使用过UIKit，SwiftUI的<code>Text</code>控制与UIKit中的<code>UILabel</code>非常相似。这是一个能够显示一行或多行文字的视图。这个 <code>Text</code>控制无法编辑，不过对于在萤幕上呈现唯读的资讯非常好用。举例来说，你想要在画面上呈现一个讯息，你可以使用<code>Text</code> 来实作。</p>
<p>本章，我将告诉你如何以<code>Text</code> 来呈现资讯。你将会学到如何运用不同颜色、字体、背景与旋转效果来自订文字。</p>
<h3 id="建立新项目来体验swiftui">建立新项目来体验SwiftUI</h3>
<p>首先，开启Xcode并使用<em>Single View App</em> 模板来建立一个新项目，输入项目名称，我设定为<em>SwiftUIText</em>，不过你可以使用任何的名称。在组织名称（ organization name），你可以设定为你的公司或组织的名字。组织识别码（organization identifier）是App的唯一识别码，这里我使用<em>com.appcoda</em>，不过这里需要填入你自己的内容，如果你有一个网站，则可以将网域名称以倒过来写的方式作为设定。要使用SwiftUI的话，则需要在User Interface选项勾选<code>SwiftUI</code>，点选 <em>Next</em>并选取一个资料夹来建立项目。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-1.png" alt="图1. 建立一个新项目"></p>
<p>储存完项目之后，Xcode即会载入<code>ContentView.swift</code> 档，并显示一个设计画布（ design canvas ）与预览画布（preview canvas）。如果你没有见到这个画布，你可以至Xcode选单，并选取 <em>Editor</em> &gt; <em>Canvas</em>来启用它。</p>
<p>Xcode预设会在 <code>ContentView.swift</code>上建立一些SwiftUI程式码。不过，这个预览画布不会渲染（render）App预览画面。你必须点选<em>Resume</em> 按钮才能看到这个预览画面。按下按钮之后，Xcode会依照你在模拟器选项（例如iPhone 11 Pro）中的选择来将预览画面渲染在模拟器中。为了让程式编辑器与画布能显示，你可以隐藏项目导览器（project navigator ）与工具面板来释放更多空间。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-2.png" alt="图2. 程式编辑器与画布"></p>
<h3 id="简单文字的呈现">简单文字的呈现</h3>
<p>在<code>ContentView</code> 所产生的简单程式已经告诉你如何显示一行文字。程式初始化一个 <code>Text</code> 并将要放的文字（例如<em>Hello World</em>）作为参数来传传递，显示如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">Text(<span style="color:#e6db74">&#34;Hello World&#34;</span>)
</code></pre></div><p>如此，预览画布即会在萤幕上显示 <em>Hello World</em>。这是建立一个文字视图的基本语法。你可以任意变更文字内容，画布会即时显示变更的结果。</p>
<p><img src="https://www.appcoda.com.tw/learnswiftui/images/text/swiftui-text-3.png" alt="图3. 变更文字"></p>
<h3 id="变更字体与颜色">变更字体与颜色</h3>
<p>在SwiftUI，你可以呼叫一些方法，也就是所谓的修饰器（<em>Modifiers</em>）来变更属性（例如颜色）。譬如说，你想要粗体字。你可以使用名为<code>fontWeight</code>的修饰器，并指定你想要的字体粗细（例如<code>.bold</code>）：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">Text(<span style="color:#e6db74">&#34;Stay Hungry. Stay Foolish.&#34;</span>).fontWeight(.bold)
</code></pre></div><p>你可以使用点语法（dot syntax）来存取修饰器。当你输入一个点符号时，Xcode则出现你可能会用到的修饰器或值。举例来说，当你在<code>fontWeight</code>修饰器，输入一个点符号时，你会见到不同的字体粗细选项，你可以选取<code>bold</code>来使用粗体字。如果你想要更粗一点，则可以选取<code>heavy</code>或<code>black</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-4.png" alt="图4. 挑选你喜爱的字体粗细"></p>
<p>透过<code>fontWeight</code> 修饰器的呼叫，并选取 <code>.bold</code>的值，它会回传一个加上粗体字的视图。SwiftUI有趣的是，你可以进一步串连其他修饰器。譬如说，你想要大一点的粗体字，程式可以修改如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">Text(<span style="color:#e6db74">&#34;Stay Hungry. Stay Foolish.&#34;</span>).fontWeight(.bold).font(.title)
</code></pre></div><p>因为可能会串连多个修饰器，我们通常会将以上的程式写成如下的格式：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">Text(<span style="color:#e6db74">&#34;Stay Hungry. Stay Foolish.&#34;</span>)
    .fontWeight(.bold)
    .font(.title)
</code></pre></div><p>这个功能是一样的，不过我相信你会发现到以上的程式更容易阅读。我们将继续在本书中使用这样的程式写法。</p>
<p><code>font</code>修饰器可以让你变更字体属性。在上面的程式中，我们指定使用<em>title</em>字体以放大文字。SwiftUI内有几个内建的字体样式，包括<em>title</em>、<em>largeTitle</em>、<em>body</em>等等。如果你想要加大字体大小，则可以将<code>.title</code>改成<code>.largeTitle</code>。</p>
<p><em>提示：你可以参考这份文件（<a href="https://developer.apple.com/documentation/swiftui/font%EF%BC%89%E4%BE%86%E6%89%BE%E5%87%BA%E6%89%80%E6%9C%89">https://developer.apple.com/documentation/swiftui/font）来找出所有</a><code>font</code>修饰器所支援的值。</em></p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-5.png" alt="图5. 变更字体样式"></p>
<p>你也可以使用 <code>font</code>修饰器来指定字体设计，譬如说，你想要字体圆润。你可以将修饰器撰写如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.font(.system(.largeTitle, design: .rounded))
</code></pre></div><p>这里你指定使用系统字体，文字样式为<code>largeTitle</code> ，以及 <code>rounded</code> 设计。预览画布应该会立即对变更做出反应，并显示圆润的文字。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-6.png" alt="图6.使用圆字体设计"></p>
<p>动态型态（ Dynamic Type ）是iOS依照使用者设定（设定&gt;萤幕显示与亮度&gt;文字大小）而自动调整字体大小的功能。换句话说，当你使用文字样式（例如<code>.title</code>），这个字体大小将会改变，你的App会依照使用者的偏好来自动缩放文字。</p>
<p>如果你想要使用一个固定大小的字体，你可以将程式修改如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.font(.system(size: <span style="color:#ae81ff">20</span>))
</code></pre></div><p>这是告诉系统使用一个20 点大小的固定字体。</p>
<p>如所述，你可以继续串连其他修饰器来客制化文字。现在我们来变更字体颜色。你可以使用<code>foregroundColor</code> 修饰器来完成，如下所示：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.foregroundColor(.green)
</code></pre></div><p><code>foregroundColor</code>修饰器接收<code>顏色</code>的值。这里我们指定使用 <code>.green</code>，这个值是内建颜色，你也可以使用其他像是<code>.red</code>、<code>.purple</code>等内建颜色值。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-7.png" alt="图7. 变更字体颜色"></p>
<p>虽然我们比较喜欢使用程式码自订一个控制元件的属性，你也可以使用设计画布来编辑。按住command键不放，并点选文字来带出弹出选单，选取 <em>Inspect&hellip;</em>，然后你可以编辑text/font属性。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-8.png" alt="图8. 使用Inspect 功能来编辑文字属性"></p>
<h3 id="使用自订字体">使用自订字体</h3>
<p>预设所有显示字体都是使用系统字体。如果你想要使用其他字体，你可以将以下这行程式：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.font(.system(size: <span style="color:#ae81ff">20</span>))
</code></pre></div><p>以这行取代：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.font(.custom(<span style="color:#e6db74">&#34;Helvetica Neue&#34;</span>, size: <span style="color:#ae81ff">25</span>))
</code></pre></div><p>除了使用<code>.system</code>，以上的程式使用 <code>.custom</code> 并指定偏好的字体名称。字体名称可以在字体簿（ Font Book）找到，你可以打开Finder &gt;应用程式，并点选<em>字体簿</em>来开启App。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-9.png" alt="图9. 字体簿"></p>
<h3 id="多行文字的处理">多行文字的处理</h3>
<p><code>Text</code> 预设支援多行文字，所以它可以显示一段文字，而不需要使用任何其他修饰器，将程式以下面这段替换：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">Text(<span style="color:#e6db74">&#34;Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma—which is living with the results of other people’s thinking. Don’t let the noise of others’ opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition.&#34;</span>)
    .fontWeight(.bold)
    .font(.title)
    .foregroundColor(.gray)
</code></pre></div><p>你可以将这段文字换成你自己的内容。只要确认内容长度够长即可。做完变更后，设计画布应该会渲染一个多行文字标签。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-10.png" alt="图10. 显示多行文字"></p>
<p>要将文字置中对齐，插入 <code>multilineTextAlignment</code>修饰器，并设定值为 <code>.center</code>如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.multilineTextAlignment(.center)
</code></pre></div><p>在某些情况下，想要限制固定的行数的话，你可以使用<code>lineLimit</code> 修饰器。以下为例：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.lineLimit(<span style="color:#ae81ff">3</span>)
</code></pre></div><p>系统预设设定是截断字尾。要修改文字的截断模式，你可以使用<code>truncationMode</code>修饰器，并设定它的值为 <code>.head</code>或 <code>.middle</code>，如下所示：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.truncationMode(.head)
</code></pre></div><p>变更完成之后，你的文字会如下图所示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-11.png" alt="图11. 使用.head 截断模式"></p>
<p>先前我提到 <code>Text</code>控制预设是显示多行文字。理由是SwiftUI框架预设 <code>lineLimit</code>修饰器为 <code>nil</code>的值，你可以将<code>.lineLimit</code> 设定为<code>nil</code>来看一下结果：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.lineLimit(<span style="color:#66d9ef">nil</span>)
</code></pre></div><h3 id="设定间距与行距">设定间距与行距</h3>
<p>一般预设的行距对大部分的情况而言已经够用。如果你想要改预设的设定，你可以使用<code>lineSpacing</code> 修饰器来调整间距。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.lineSpacing(<span style="color:#ae81ff">10</span>)
</code></pre></div><p>如你所见，文字太靠近边缘的左侧与右侧。要赋予更多间距，你可以使用 <code>padding</code>修饰器，为文字的每一边增加一些间距。在<code>lineSpacing</code>修饰器后面插入以下这行程式：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.padding()
</code></pre></div><p>设计画布现在的结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-12.png" alt="图12. 设定间距与文字行距"></p>
<h3 id="文字的旋转">文字的旋转</h3>
<p>SwiftUI框架提供了可以轻易旋转文字的API，你可以像这样使用<code>rotateEffect</code> 修饰器，并传入旋转角度：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.rotationEffect(.degrees(<span style="color:#ae81ff">45</span>))
</code></pre></div><p>如果你在<code>padding()</code>后面插入以上这行程式，你将会见到文字旋转45度。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-13.png" alt="图13. 旋转文字"></p>
<p>预设，旋转动作会以文字视图为中心来旋转，如果你想要将文字以特定点来旋转（譬如左上角），程式的写法如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.rotationEffect(.degrees(<span style="color:#ae81ff">20</span>), anchor: UnitPoint(x: <span style="color:#ae81ff">0</span>, y: <span style="color:#ae81ff">0</span>))
</code></pre></div><p>我们另外传入<code>anchor</code> 参数来指定旋转点。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-14.png" alt="图14. 以文字视图的左上角来旋转"></p>
<p>你不止可以进行2D旋转， SwiftUI提供一个称作 <code>rotation3DEffect</code> 修饰器，可以让你建立3D效果。这个修饰器有两个参数：「旋转角度」与「旋转轴」，譬如你要建立透视文字特效，程式可以这样写：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.rotation3DEffect(.degrees(<span style="color:#ae81ff">60</span>), axis: (x: <span style="color:#ae81ff">1</span>, y: <span style="color:#ae81ff">0</span>, z: <span style="color:#ae81ff">0</span>))
</code></pre></div><p>只要一行程式，你就可以建立星际大战透视（ Star Wars perspective ）文字</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-15-20200929190304069.png" alt="图15. 使用3D 旋转建立惊艳的文字效果"></p>
<p>你还可以插入以下这行程式来对透视文字建立阴影效果</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">.shadow(color: .gray, radius: <span style="color:#ae81ff">2</span>, x: <span style="color:#ae81ff">0</span>, y: <span style="color:#ae81ff">15</span>)
</code></pre></div><p>这个 <code>shadow</code> 修饰器将会对文字应用阴影效果，你只需要指定颜色与阴影半径。另外，你也可以告诉系统<code>x</code>与<code>y</code>值来指定阴影位置</p>
<p><img src="https://cdn.jsdelivr.net/gh/FishionYu/Rayyu-sPic@master/img/swiftui-text-16.png" alt="图16. 应用阴影效果"></p>
]]></content>
        </item>
        
        <item>
            <title>初探HTML</title>
            <link>https://dev.hanry.top/posts/2020/09/%E5%88%9D%E6%8E%A2html/</link>
            <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dev.hanry.top/posts/2020/09/%E5%88%9D%E6%8E%A2html/</guid>
            <description>初探HTML HTML骨架标签    标签名 定义 说明     &amp;lt;html&amp;gt;&amp;lt;/html&amp;gt; HTML标签 页面中最大的标签，我们成为根标签   &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; 文档的头部 注意在head标签中我们必须要设置的标签是title   &amp;lt;titile&amp;gt;&amp;lt;/title&amp;gt; 文档的标题 让页面拥有一个属于自己的网页标题   &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt; 文档的主体 元素包含文档的所有内容，页面内容 基本都是放到body里面的    在VS Code中，新建一个.html的文件，输入html:5即可自动生成一个HTML骨架。
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 骨架标签详解 页面语言lang  en：定义页面语言为英语。 zh-CN：定义页面语言为中文。  头标签head 头标签内部的常见标签如下：
 &amp;lt;title&amp;gt;：指定整个网页的标题，在浏览器最上方显示。 &amp;lt;base&amp;gt;：为页面上的所有链接规定默认地址或默认目标。 &amp;lt;meta&amp;gt;：提供有关页面的基本信息 &amp;lt;body&amp;gt;：用于定义HTML文档所要显示的内容，也称为主体标签。我们所写的代码必须放在此标签內。 &amp;lt;link&amp;gt;：定义文档与外部资源的关系。  </description>
            <content type="html"><![CDATA[<h1 id="初探html">初探HTML</h1>
<h2 id="html骨架标签">HTML骨架标签</h2>
<table>
<thead>
<tr>
<th>标签名</th>
<th>定义</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;html&gt;&lt;/html&gt;</code></td>
<td>HTML标签</td>
<td>页面中最大的标签，我们成为根标签</td>
</tr>
<tr>
<td><code>&lt;head&gt;&lt;/head&gt;</code></td>
<td>文档的头部</td>
<td>注意在head标签中我们必须要设置的标签是title</td>
</tr>
<tr>
<td><code>&lt;titile&gt;&lt;/title&gt;</code></td>
<td>文档的标题</td>
<td>让页面拥有一个属于自己的网页标题</td>
</tr>
<tr>
<td><code>&lt;body&gt;&lt;/body&gt;</code></td>
<td>文档的主体</td>
<td>元素包含文档的所有内容，页面内容 基本都是放到body里面的</td>
</tr>
</tbody>
</table>
<p>在<code>VS Code</code>中，新建一个<code>.html</code>的文件，输入<code>html:5</code>即可自动生成一个HTML骨架。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en&#34;</span>&gt;
&lt;<span style="color:#f92672">head</span>&gt;
    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;UTF-8&#34;</span>&gt;
    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;viewport&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;width=device-width, initial-scale=1.0&#34;</span>&gt;
    &lt;<span style="color:#f92672">title</span>&gt;Document&lt;/<span style="color:#f92672">title</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;
&lt;<span style="color:#f92672">body</span>&gt;
    
&lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><h3 id="骨架标签详解">骨架标签详解</h3>
<h4 id="页面语言lang">页面语言lang</h4>
<ul>
<li>en：定义页面语言为英语。</li>
<li>zh-CN：定义页面语言为中文。</li>
</ul>
<h4 id="头标签head">头标签head</h4>
<p>头标签内部的常见标签如下：</p>
<ul>
<li><code>&lt;title&gt;</code>：指定整个网页的标题，在浏览器最上方显示。</li>
<li><code>&lt;base&gt;</code>：为页面上的所有链接规定默认地址或默认目标。</li>
<li><code>&lt;meta&gt;</code>：提供有关页面的基本信息</li>
<li><code>&lt;body&gt;</code>：用于定义HTML文档所要显示的内容，也称为主体标签。我们所写的代码必须放在此标签內。</li>
<li><code>&lt;link&gt;</code>：定义文档与外部资源的关系。</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Swift5.1函数笔记</title>
            <link>https://dev.hanry.top/posts/2020/09/swift5.1%E5%87%BD%E6%95%B0%E7%AC%94%E8%AE%B0/</link>
            <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dev.hanry.top/posts/2020/09/swift5.1%E5%87%BD%E6%95%B0%E7%AC%94%E8%AE%B0/</guid>
            <description>函数本质是什么 函数本质是用来复用一段代码
如何定义函数 函数定义使用func，以 func 作为前缀。指定函数返回类型时，用返回箭头 -&amp;gt;（一个连字符后跟一个右尖括号）后跟返回类型的名称的方式来表示。
基本语法是:
func name(lastname: String, firstname: String) -&amp;gt; String{ ... } 意思是：
func 函数名(参数一: 类型, 参数二: 类型, 以此类推) -&amp;gt; 返回值类型 { ... } 参数 参数的定义需要有名字和类型
无参数函数 函数是可以没有参数的，当函数没有参数时，在函数名后还是需要一对圆括号。当被调用时，也需要在函数名后写一对圆括号。
例如：
func sayHelloWorld() -&amp;gt; String { return &amp;#34;hello, world&amp;#34; } print(sayHelloWorld()) // 打印“hello, world” 参数标签 每个函数参数都有一个参数标签（argument label）以及一个参数名称（parameter name），参数标签本质上是指向参数名称的。
默认情况下，函数参数使用参数名称来作为它们的参数标签。
如何指定参数标签 在参数名称前指定它的参数标签，中间以空格分隔
例如：
func gotowork(at time: String) { //at就是参数标签，time就是参数名称 print(&amp;#34;this time is \(time)&amp;#34;) } gotowork(at: &amp;#34;8:00&amp;#34;) // 输出this time is 8:00 //有了参数标签，有时会让代码更易读 调用函数读起来go to work at 8:00  调用函数的参数也是可以没有标签的，只需要在函数中定义参数时前面加一个_，即可忽略参数标签</description>
            <content type="html"><![CDATA[<h1 id="函数本质是什么">函数本质是什么</h1>
<p>函数本质是用来复用一段代码</p>
<h2 id="如何定义函数">如何定义函数</h2>
<p>函数定义使用func，以 <code>func</code> 作为前缀。指定函数返回类型时，用返回箭头 <code>-&gt;</code>（一个连字符后跟一个右尖括号）后跟返回类型的名称的方式来表示。</p>
<p>基本语法是:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">name</span>(lastname: String, firstname: String) -&gt; String{
  ...
}
</code></pre></div><p>意思是：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#960050;background-color:#1e0010">函数名</span>(<span style="color:#960050;background-color:#1e0010">参数一</span>: <span style="color:#960050;background-color:#1e0010">类型</span>, <span style="color:#960050;background-color:#1e0010">参数二</span>: <span style="color:#960050;background-color:#1e0010">类型</span>, <span style="color:#960050;background-color:#1e0010">以此类推</span>) -&gt; <span style="color:#960050;background-color:#1e0010">返回值类型</span> {
  ...
}
</code></pre></div><h2 id="参数">参数</h2>
<p>参数的定义需要有名字和类型</p>
<h3 id="无参数函数">无参数函数</h3>
<p>函数是可以没有参数的，当函数没有参数时，在函数名后还是需要一对圆括号。当被调用时，也需要在函数名后写一对圆括号。</p>
<p>例如：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sayHelloWorld</span>() -&gt; String {
    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;hello, world&#34;</span>
}
print(sayHelloWorld())
<span style="color:#75715e">// 打印“hello, world”</span>
</code></pre></div><h3 id="参数标签">参数标签</h3>
<p>每个函数参数都有一个<em>参数标签（argument label）<em>以及一个</em>参数名称（parameter name）</em>，参数标签本质上是指向参数名称的。</p>
<p><strong>默认情况下，函数参数使用参数名称来作为它们的参数标签。</strong></p>
<h4 id="如何指定参数标签">如何指定参数标签</h4>
<p>在参数名称前指定它的参数标签，中间以空格分隔</p>
<p>例如：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">gotowork</span>(at time: String) { <span style="color:#75715e">//at就是参数标签，time就是参数名称</span>
  	print(<span style="color:#e6db74">&#34;this time is </span><span style="color:#e6db74">\(</span>time<span style="color:#e6db74">)</span><span style="color:#e6db74">&#34;</span>)
}
gotowork(at: <span style="color:#e6db74">&#34;8:00&#34;</span>) <span style="color:#75715e">// 输出this time is 8:00</span>
<span style="color:#75715e">//有了参数标签，有时会让代码更易读  调用函数读起来go to work at 8:00</span>
</code></pre></div><blockquote>
<p>调用函数的参数也是可以没有标签的，只需要在函数中定义参数时前面加一个_，即可忽略参数标签</p>
<p>例如<code>func sayHelloWorld(_ sentence: string) { ... }</code></p>
<p>调用时直接写<code>sayHelloWorld(&quot;hello world&quot;)</code></p>
<p>而不必写<code>sayHellowWorld(sentence: &quot;hello world&quot;)</code></p>
</blockquote>
<h3 id="默认参数值">默认参数值</h3>
<p>参数值在定义时可以默认给一个值。当默认值被定义后，调用这个函数时可以忽略这个参数。</p>
<p><code>Func 函数名(参数名1: 参数类型1 = 默认值1，参数名2: 参数类型2 = 默认值2 )</code></p>
<p>例如：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">check</span>(name: String = <span style="color:#e6db74">&#34;none&#34;</span>, age: Int = <span style="color:#ae81ff">1</span>, job: String) { <span style="color:#75715e">//name默认是none，age默认是1</span>
    print(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">\(</span>name<span style="color:#e6db74">)</span><span style="color:#e6db74">,</span><span style="color:#e6db74">\(</span>age<span style="color:#e6db74">)</span><span style="color:#e6db74">,</span><span style="color:#e6db74">\(</span>job<span style="color:#e6db74">)</span><span style="color:#e6db74">&#34;</span>)
}

check(name: <span style="color:#e6db74">&#34;joy&#34;</span>, age: <span style="color:#ae81ff">18</span>, job: <span style="color:#e6db74">&#34;develop&#34;</span>) <span style="color:#75715e">//joy 18 develop</span>
check(age: <span style="color:#ae81ff">1</span>, job: <span style="color:#e6db74">&#34;student&#34;</span>)  <span style="color:#75715e">//none 1 student</span>
</code></pre></div><h3 id="可变参数">可变参数</h3>
<p>通过在变量类型名后面加入（<code>...</code>）的方式来定义可变参数。</p>
<p>可变参数的传入值在函数体中变为此类型的一个数组。例如，一个叫做 <code>numbers</code> 的 <code>Double...</code> 型可变参数，在函数体内可以当做一个叫 <code>numbers</code> 的 <code>[Double]</code> 型的数组常量。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">arithmeticMean</span>(<span style="color:#66d9ef">_</span> numbers: Double...) -&gt; Double {
    <span style="color:#66d9ef">var</span> total: Double = <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> number <span style="color:#66d9ef">in</span> numbers {
        total <span style="color:#f92672">+=</span> number
    }
    <span style="color:#66d9ef">return</span> total <span style="color:#f92672">/</span> Double(numbers.count)
}
arithmeticMean(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>)  <span style="color:#75715e">//相当于number变成了一个数组[1,2,3,4,5]</span>
<span style="color:#75715e">// 返回 3.0, 是这 5 个数的平均数。</span>
arithmeticMean(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">8.25</span>, <span style="color:#ae81ff">18.75</span>)
<span style="color:#75715e">// 返回 10.0, 是这 3 个数的平均数。</span>
</code></pre></div><blockquote>
<p>需要注意的是：</p>
<ol>
<li>一个函数里面最多只能有一个可变参数</li>
<li>紧跟在可变参数后面的参数不能省略参数标签</li>
</ol>
<p>🉑 ​<code> func sum(name: String..., age: Int)</code></p>
<p>🚫 <code>func sum(name: String..., _ age: Int)</code></p>
</blockquote>
<h3 id="输入输出函数">输入输出函数⚠️</h3>
<p>函数参数默认是常量。试图在函数体中更改参数值将会导致编译错误。</p>
<p>如果你想要一个函数可以修改参数的值，并且想要在这些修改在函数调用结束后仍然存在，那么就应该把这个参数定义为<em><strong>输入输出参数（In-Out Parameters）</strong></em>。</p>
<p>定义一个输入输出参数时，在参数定义前加 <code>inout</code> 关键字。</p>
<p>你只能传递变量给输入输出参数。你不能传入常量或者字面量，因为这些量是不能被修改的。当传入的参数作为输入输出参数时，需要在参数名前加 <code>&amp;</code> 符，表示这个值可以被函数修改。</p>
<blockquote>
<p>简单理解，就是假如有一个<code>func sum(name: inout String, age: inout Int){...}</code>，在外部调用函数时，<code>sum(name: ray, age: 18)</code>，其中的<code>ray</code>和<code>18</code>有可能会被函数改变</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#75715e">//示例代码，快速搞懂</span>
<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sum</span>(v1: <span style="color:#66d9ef">inout</span> Int, v2: <span style="color:#66d9ef">inout</span> Int) {  <span style="color:#75715e">//这是一个输入输出函数</span>
    <span style="color:#66d9ef">let</span> copy = v1
    v1 = v1 <span style="color:#f92672">+</span> v2
    v2 = copy <span style="color:#f92672">-</span> v2
}

<span style="color:#66d9ef">var</span> num1 = <span style="color:#ae81ff">1</span> <span style="color:#75715e">//看啊，num1是1</span>
<span style="color:#66d9ef">var</span> num2 = <span style="color:#ae81ff">4</span> <span style="color:#75715e">//看啊，num2是4</span>

print(num1, num2) <span style="color:#75715e">//打印出来的确是 1 4</span>

sum(v1: &amp;num1, v2: &amp;num2) <span style="color:#75715e">//调用函数sum</span>
print(num1, num2) <span style="color:#75715e">//打印出来就是5 -3，现在num1就是1+5=5， num2就是1-4=-3</span>
<span style="color:#75715e">//那我在调用一次呢</span>
sum(v1: &amp;num1, v2: &amp;num2) <span style="color:#75715e">//再次调用函数sum</span>
print(num1, num2) <span style="color:#75715e">//打印出来就是2 8，现在num1就是5+(-3)=2， num2就是5-(-3)=8</span>
</code></pre></div></blockquote>
<h2 id="返回值">返回值</h2>
<p>函数里面一般是有返回值<code>return</code></p>
<p>如果需要无返回值</p>
<h3 id="无返回值函数">无返回值函数</h3>
<p>函数可以没有返回值。</p>
<p>因为这个函数不需要返回值，所以这个函数的定义中没有返回箭头（-&gt;）和返回类型。</p>
<p>下面是 <code>greet(person:)</code> 函数的另一个版本，这个函数直接打印一个 <code>String</code> 值，而不是返回它：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">greet</span>(person: String) {
    print(<span style="color:#e6db74">&#34;Hello, </span><span style="color:#e6db74">\(</span>person<span style="color:#e6db74">)</span><span style="color:#e6db74">!&#34;</span>)
}
greet(person: <span style="color:#e6db74">&#34;Dave&#34;</span>)
<span style="color:#75715e">// 打印“Hello, Dave!”</span>
</code></pre></div><h3 id="多重返回值函数">多重返回值函数</h3>
<p>你可以用元组（tuple）类型让多个值作为一个复合值从函数中返回。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minMax</span>(array: [Int]) -&gt; (min: Int, max: Int) {
    <span style="color:#66d9ef">var</span> currentMin = array[<span style="color:#ae81ff">0</span>]
    <span style="color:#66d9ef">var</span> currentMax = array[<span style="color:#ae81ff">0</span>]
    <span style="color:#66d9ef">for</span> value <span style="color:#66d9ef">in</span> array[<span style="color:#ae81ff">1.</span>.&lt;array.count] {
        <span style="color:#66d9ef">if</span> value <span style="color:#f92672">&lt;</span> currentMin {
            currentMin = value
        }
        <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> value <span style="color:#f92672">&gt;</span> currentMax {
            currentMax = value
        }
    }
    <span style="color:#66d9ef">return</span> (currentMin, currentMax)
}
print(minMax(array: [<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">8</span>]))  <span style="color:#75715e">// 这是一个元组(min: 1, max: 9)</span>

<span style="color:#66d9ef">let</span> tumple = [<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">8</span>]

print(<span style="color:#e6db74">&#34;this is </span><span style="color:#e6db74">\(</span>minMax<span style="color:#e6db74">(</span>array: tumple<span style="color:#e6db74">)</span>.<span style="color:#ae81ff">0</span><span style="color:#e6db74">)</span><span style="color:#e6db74">&#34;</span>) <span style="color:#75715e">// this is 1 第一个元组值</span>
print(<span style="color:#e6db74">&#34;this is </span><span style="color:#e6db74">\(</span>minMax<span style="color:#e6db74">(</span>array: tumple<span style="color:#e6db74">)</span>.max<span style="color:#e6db74">)</span><span style="color:#e6db74">&#34;</span>) <span style="color:#75715e">// this is 9  元组max对应的值</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Swift5.1基础运算符</title>
            <link>https://dev.hanry.top/posts/2020/08/swift5.1%E5%9F%BA%E7%A1%80%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
            <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dev.hanry.top/posts/2020/08/swift5.1%E5%9F%BA%E7%A1%80%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
            <description>术语 运算符分为一元、二元和三元运算符：
 一元运算符是对单一对象操作（例如+a, !b, c!） 二元运算符是对两个对象操作（例如a + b, a - b） 三元运算符是对三个对象操作，swift中只有一个就是a ? b : c   三元运算符意思是问题 ? 答案 1 : 答案 2，后文会讲到
 赋值运算符 赋值运算符（a = b），表示用 b 的值来初始化或更新 a 的值：
let b = 10 var a = 5 a = b // a 现在等于 10 let (x, y) = (1, 2) // 现在 x 等于 1，y 等于 2 算数运算符 + - × ÷，大家都懂
求余运算符 a &amp;amp; b 计算 b的多少倍刚刚好可以容入a，返回来多的数。</description>
            <content type="html"><![CDATA[<h1 id="术语">术语</h1>
<p>运算符分为一元、二元和三元运算符：</p>
<ul>
<li>一元运算符是对单一对象操作（例如<code>+a, !b, c!</code>）</li>
<li>二元运算符是对两个对象操作（例如<code>a + b, a - b</code>）</li>
<li>三元运算符是对三个对象操作，swift中只有一个就是<code>a ? b : c</code></li>
</ul>
<blockquote>
<p>三元运算符意思是<code>问题 ? 答案 1 : 答案 2</code>，后文会讲到</p>
</blockquote>
<h1 id="赋值运算符">赋值运算符</h1>
<p><em>赋值运算符</em>（<code>a = b</code>），表示用 <code>b</code> 的值来初始化或更新 <code>a</code> 的值：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> b = <span style="color:#ae81ff">10</span>
<span style="color:#66d9ef">var</span> a = <span style="color:#ae81ff">5</span>
a = b
<span style="color:#75715e">// a 现在等于 10</span>

<span style="color:#66d9ef">let</span> (x, y) = (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>)
<span style="color:#75715e">// 现在 x 等于 1，y 等于 2</span>
</code></pre></div><h1 id="算数运算符">算数运算符</h1>
<p><code>+ - × ÷</code>，大家都懂</p>
<h2 id="求余运算符">求余运算符</h2>
<p><code>a &amp; b</code> 计算 <code>b</code>的多少倍刚刚好可以容入<code>a</code>，返回来多的数。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#ae81ff">9</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>    <span style="color:#75715e">// 等于 1</span>
</code></pre></div><h2 id="一元正负运算符">一元正负运算符</h2>
<p>就是 值 得正负，没什么好讲的。</p>
<h1 id="组合赋值运算符">组合赋值运算符</h1>
<p>Swift 也提供把其他运算符和赋值运算（<code>=</code>）组合的<em>组合赋值运算符</em>，组合加运算（<code>+=</code>）是其中一个例子：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">var</span> a = <span style="color:#ae81ff">1</span>
a <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span>
<span style="color:#75715e">// a 现在是 3</span>
</code></pre></div><p>表达式 <code>a += 2</code> 是 <code>a = a + 2</code> 的简写。</p>
<blockquote>
<p>⚠️注意</p>
<p>复合赋值运算没有返回值，<code>let b = a += 2</code></p>
</blockquote>
<h1 id="比较运算符">比较运算符</h1>
<p>Swift 支持以下的比较运算符：</p>
<ul>
<li>等于（<code>a == b</code>）</li>
<li>不等于（<code>a != b</code>）</li>
<li>大于（<code>a &gt; b</code>）</li>
<li>小于（<code>a &lt; b</code>）</li>
<li>大于等于（<code>a &gt;= b</code>）</li>
<li>小于等于（<code>a &lt;= b</code>）</li>
</ul>
<blockquote>
<p>返回Bool值，大多用在判断语句中</p>
<p>元祖是可以被比较的，按照从左往右的顺序比较</p>
</blockquote>
<h1 id="三元运算符">三元运算符</h1>
<p>它的形式是 <code>问题 ? 答案 1 : 答案 2</code>，</p>
<p>如果 <code>问题</code> 成立，返回 <code>答案 1</code> 的结果；反之返回 <code>答案 2</code> 的结果。</p>
<h1 id="区间运算符">区间运算符</h1>
<h2 id="闭区间运算符">闭区间运算符</h2>
<p>（<code>a...b</code>）就是定义一个包含从 <code>a</code> 到 <code>b</code>（包括 <code>a</code> 和 <code>b</code>）的所有值的区间。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#ae81ff">1.</span>..<span style="color:#ae81ff">5</span> <span style="color:#75715e">//1, 2, 3, 4, 5</span>
<span style="color:#ae81ff">100.</span>..<span style="color:#ae81ff">103</span> <span style="color:#75715e">//100, 101, 102, 103</span>
</code></pre></div><blockquote>
<p>闭区间运算符在迭代一个区间的所有值时是非常有用的，如在 for-in 循环中：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">for</span> index <span style="color:#66d9ef">in</span> <span style="color:#ae81ff">1.</span>..<span style="color:#ae81ff">5</span> {
print(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">\(</span>index<span style="color:#e6db74">)</span><span style="color:#e6db74"> * 5 = </span><span style="color:#e6db74">\(</span>index <span style="color:#f92672">*</span> <span style="color:#ae81ff">5</span><span style="color:#e6db74">)</span><span style="color:#e6db74">&#34;</span>)
}
</code></pre></div></blockquote>
<h2 id="半开区间运算符">半开区间运算符</h2>
<p>（<code>a..&lt;b</code>）定义一个从 <code>a</code> 到 <code>b</code> 但不包括 <code>b</code> 的区间。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#ae81ff">1</span> ..<span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span> <span style="color:#75715e">//1, 2, 3 ,4</span>
<span style="color:#ae81ff">16</span> ..<span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">19</span> <span style="color:#75715e">//16, 17, 18</span>
</code></pre></div><blockquote>
<p>半开区间的实用性在于当你使用一个从 0 开始的列表（如数组）时，非常方便地从0数到列表的长度。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> names = [<span style="color:#e6db74">&#34;Anna&#34;</span>, <span style="color:#e6db74">&#34;Alex&#34;</span>, <span style="color:#e6db74">&#34;Brian&#34;</span>, <span style="color:#e6db74">&#34;Jack&#34;</span>]
<span style="color:#66d9ef">let</span> count = names.count
<span style="color:#66d9ef">for</span> i <span style="color:#66d9ef">in</span> <span style="color:#ae81ff">0.</span>.&lt;count {
    print(<span style="color:#e6db74">&#34;第 </span><span style="color:#e6db74">\(</span>i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#e6db74">)</span><span style="color:#e6db74"> 个人叫 </span><span style="color:#e6db74">\(</span>names[i]<span style="color:#e6db74">)</span><span style="color:#e6db74">&#34;</span>)
}
<span style="color:#75715e">// 第 1 个人叫 Anna</span>
<span style="color:#75715e">// 第 2 个人叫 Alex</span>
<span style="color:#75715e">// 第 3 个人叫 Brian</span>
<span style="color:#75715e">// 第 4 个人叫 Jack</span>
</code></pre></div></blockquote>
<h2 id="单侧区间">单侧区间</h2>
<p>闭区间操作符有另一个表达形式，可以表达往一侧无限延伸的区间。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> names = [<span style="color:#e6db74">&#34;Anna&#34;</span>, <span style="color:#e6db74">&#34;Alex&#34;</span>, <span style="color:#e6db74">&#34;Brian&#34;</span>, <span style="color:#e6db74">&#34;Jack&#34;</span>]
<span style="color:#66d9ef">for</span> name <span style="color:#66d9ef">in</span> names[<span style="color:#ae81ff">2.</span>..] {
    print(name)  <span style="color:#75715e">//从数组第3个值开始打印，打印到数组末</span>
}
<span style="color:#75715e">// Brian</span>
<span style="color:#75715e">// Jack</span>
</code></pre></div><p>你也可以查看一个单侧区间是否包含某个特定的值，就像下面展示的那样。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> range = ...<span style="color:#ae81ff">5</span>
range.contains(<span style="color:#ae81ff">7</span>)   <span style="color:#75715e">// false  都是Bool值，7明显不在...5的范围，返回false</span>
range.contains(<span style="color:#ae81ff">4</span>)   <span style="color:#75715e">// true   4在...5的范围，返回true</span>
range.contains(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)  <span style="color:#75715e">// true		即使符号为负依然在...5的范围，返回true</span>
</code></pre></div><h1 id="逻辑运算符">逻辑运算符</h1>
<ul>
<li>逻辑非（<code>!a</code>）</li>
<li>逻辑与（<code>a &amp;&amp; b</code>）</li>
<li>逻辑或（<code>a || b</code>）</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Swift5.1基础笔记</title>
            <link>https://dev.hanry.top/posts/2020/08/swift5.1%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</link>
            <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dev.hanry.top/posts/2020/08/swift5.1%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</guid>
            <description>常量和变量 常量声明let
变量声明var
例如：
let maximumNumberOfLoginAttempts = 10 var currentLoginAttempt = 0 可以在一行中声明多个变量，类似C
例如：
var a = 1 , b = 2 , c = 3  ⚠️一般不变的值用常量let,var只声明会变化的值，防止出错
 类型注解 类型注解是声明常量或者变量的时候，说明常量或者变量中要存储的值的类型。
如果要添加类型注解，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。
例如：
var welcomeMessage: String //说明 在此声明的 welcomeMessage 只能为String类型 //welcomeMessage 可以设置为任意字符串 welcomeMessage = &amp;#34;Hello world&amp;#34; ✔️ welcomeMessage = &amp;#34;12&amp;#34; ✔️ welcomeMessage = 12 ❌ 同样，你可以在一行中定义多个变量，最后一个变量名后面添加类型注解：
var yellow, green, blue: Double  ⚠️正常情况下很少需要类型注解，Swift可以推断出这个，除非在明确要限制变量类型的情况下，一般不需要添加
 常量和变量的命名 常量和变量名可以包含任何字符，包括 Unicode 字符：常量和变量名可以包含任何字符，包括 Unicode 字符：</description>
            <content type="html"><![CDATA[<h1 id="常量和变量">常量和变量</h1>
<p>常量声明<code>let</code></p>
<p>变量声明<code>var</code></p>
<p>例如：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> maximumNumberOfLoginAttempts = <span style="color:#ae81ff">10</span>
<span style="color:#66d9ef">var</span> currentLoginAttempt = <span style="color:#ae81ff">0</span>
</code></pre></div><p>可以在一行中声明多个变量，类似C</p>
<p>例如：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">var</span> a = <span style="color:#ae81ff">1</span> , b = <span style="color:#ae81ff">2</span> , c = <span style="color:#ae81ff">3</span>
</code></pre></div><blockquote>
<p>⚠️一般不变的值用常量<code>let</code>,<code>var</code>只声明会变化的值，防止出错</p>
</blockquote>
<h2 id="类型注解">类型注解</h2>
<p>类型注解是声明常量或者变量的时候，说明常量或者变量中要存储的值的类型。</p>
<p>如果要添加类型注解，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。</p>
<p>例如：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">var</span> welcomeMessage: String

<span style="color:#75715e">//说明 在此声明的 welcomeMessage 只能为String类型</span>
<span style="color:#75715e">//welcomeMessage 可以设置为任意字符串</span>

welcomeMessage = <span style="color:#e6db74">&#34;Hello world&#34;</span> <span style="color:#960050;background-color:#1e0010">✔️</span>
welcomeMessage = <span style="color:#e6db74">&#34;12&#34;</span> <span style="color:#960050;background-color:#1e0010">✔️</span>
welcomeMessage = <span style="color:#ae81ff">12</span> <span style="color:#960050;background-color:#1e0010">❌</span>
</code></pre></div><p>同样，你可以在一行中定义多个变量，最后一个变量名后面添加类型注解：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">var</span> yellow, green, blue: Double
</code></pre></div><blockquote>
<p>⚠️正常情况下很少需要类型注解，Swift可以推断出这个，除非在明确要限制变量类型的情况下，一般不需要添加</p>
</blockquote>
<h2 id="常量和变量的命名">常量和变量的命名</h2>
<p>常量和变量名可以包含任何字符，包括 Unicode 字符：常量和变量名可以包含任何字符，包括 Unicode 字符：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> <span style="color:#960050;background-color:#1e0010">π</span> = <span style="color:#ae81ff">3.14159</span>
<span style="color:#66d9ef">let</span> <span style="color:#960050;background-color:#1e0010">你好</span> = <span style="color:#e6db74">&#34;你好世界&#34;</span>
<span style="color:#66d9ef">let</span> <span style="color:#960050;background-color:#1e0010">🐶🐮</span> = <span style="color:#e6db74">&#34;dogcow&#34;</span>
</code></pre></div><blockquote>
<p>⚠️与变量不同，常量的值一旦被确定就不能更改了。如下所示，会导致编译出错。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> languageName = <span style="color:#e6db74">&#34;Swift&#34;</span>
languageName = <span style="color:#e6db74">&#34;Swift++&#34;</span>
<span style="color:#75715e">// 这会报编译时错误 - languageName 不可改变</span>
</code></pre></div></blockquote>
<h2 id="输出常量和变量">输出常量和变量</h2>
<p>输出的语法跟C语言基本一致</p>
<p>Swift中，占位符为 <code>反斜杠+(常量名/变量名)</code>，例如<code>\(friendlyname)</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">var</span> friendlyname = <span style="color:#e6db74">&#34;电视机&#34;</span>
print (<span style="color:#e6db74">&#34;The current value of friendlyname is </span><span style="color:#e6db74">\(</span>friendlyname<span style="color:#e6db74">)</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h1 id="数据类型">数据类型</h1>
<h2 id="整数">整数</h2>
<p>整数就是没有小数部分的数字，比如 <code>42</code> 和 <code>-23</code> 。整数可以是 <code>有符号</code>（正、负、零）或者 <code>无符号</code>（正、零）。</p>
<blockquote>
<p>就像 Swift 的其他类型一样，整数类型采用<strong>大写命名法</strong>。</p>
</blockquote>
<h3 id="整数范围">整数范围</h3>
<p><code>Int</code> 可以存储的整数范围也可以达到 <code>-2,147,483,648</code> ~ <code>2,147,483,647</code>，大多数时候这已经足够大了。</p>
<h3 id="int">Int</h3>
<p>Swift 提供了一个特殊的整数类型 <code>Int</code>，长度与当前平台的原生字长相同：</p>
<ul>
<li>在32位平台上，<code>Int</code> 和 <code>Int32</code> 长度相同。</li>
<li>在64位平台上，<code>Int</code> 和 <code>Int64</code> 长度相同。</li>
</ul>
<p>除非你需要特定长度的整数，一般来说使用 <code>Int</code> 就够了。这可以提高代码一致性和可复用性。</p>
<h3 id="uint">UInt</h3>
<p>代表无符号整数，一般不使用。</p>
<blockquote>
<p>尽量不要使用 <code>UInt</code>，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。除了这种情况，最好使用 <code>Int</code>，即使你要存储的值已知是非负的。统一使用 <code>Int</code>可以提高代码的可复用性浮点数</p>
</blockquote>
<h2 id="浮点数">浮点数</h2>
<p>浮点数是有小数部分的数字，比如 <code>3.14159</code>、<code>0.1</code> 和 <code>-273.15</code>。</p>
<p>浮点类型比整数类型表示的范围更大，可以存储比 <code>Int</code> 类型更大或者更小的数字。Swift 提供了两种有符号浮点数类型：</p>
<ul>
<li><code>Double</code> 表示64位浮点数。当你需要存储很大或者很高精度的浮点数时请使用此类型。</li>
<li><code>Float</code> 表示32位浮点数。精度要求不高的话可以使用此类型。</li>
</ul>
<blockquote>
<p><code>Double</code>精确度很高，至少有15位数字，而<code>Float</code>只有6位数字。选择哪个类型取决于你的代码需要处理的值的范围，在两种类型都匹配的情况下，优先选择<code>Double</code>。</p>
</blockquote>
<h2 id="类型安全和类型推断">类型安全和类型推断</h2>
<p>Swift 是一个*类型安全（type safe）*的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型。如果你的代码需要一个 <code>String</code>，你绝对不可能不小心传进去一个 <code>Int</code>。</p>
<p>例如，如果你给一个新常量赋值 <code>42</code> 并且没有标明类型，Swift 可以推断出常量类型是 <code>Int</code> ，因为你给它赋的初始值看起来像一个整数：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> meaningOfLife = <span style="color:#ae81ff">42</span>
<span style="color:#75715e">// meaningOfLife 会被推测为 Int 类型</span>
</code></pre></div><p>同理，如果你没有给浮点字面量标明类型，Swift 会推断你想要的是 <code>Double</code>：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> pi = <span style="color:#ae81ff">3.14159</span>
<span style="color:#75715e">// pi 会被推测为 Double 类型</span>
</code></pre></div><p>当推断浮点数的类型时，Swift 总是会选择 <code>Double</code> 而不是 <code>Float</code>。</p>
<p>如果表达式中同时出现了整数和浮点数，会被推断为 <code>Double</code> 类型：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> anotherPi = <span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0.14159</span>
<span style="color:#75715e">// anotherPi 会被推测为 Double 类型</span>
</code></pre></div><p>原始值 <code>3</code> 没有显式声明类型，而表达式中出现了一个浮点字面量，所以表达式会被推断为 <code>Double</code> 类型。</p>
<h2 id="数值型字面量">数值型字面量</h2>
<h3 id="整数字面量">整数字面量</h3>
<p>可以被写作：</p>
<ul>
<li>一个<em>十进制</em>数，没有前缀</li>
<li>一个<em>二进制</em>数，前缀是 <code>0b</code></li>
<li>一个<em>八进制</em>数，前缀是 <code>0o</code></li>
<li>一个<em>十六进制</em>数，前缀是 <code>0x</code></li>
</ul>
<p>例如下面的所有整数字面量的十进制值都是 <code>17</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> decimalInteger = <span style="color:#ae81ff">17</span>
<span style="color:#66d9ef">let</span> binaryInteger = <span style="color:#ae81ff">0b10001</span>       <span style="color:#75715e">// 二进制的17</span>
<span style="color:#66d9ef">let</span> octalInteger = <span style="color:#ae81ff">0o21</span>           <span style="color:#75715e">// 八进制的17</span>
<span style="color:#66d9ef">let</span> hexadecimalInteger = <span style="color:#ae81ff">0x11</span>     <span style="color:#75715e">// 十六进制的17</span>
</code></pre></div><h3 id="浮点字面量">浮点字面量</h3>
<p>浮点字面量可以是十进制（没有前缀）或者是十六进制（前缀是 <code>0x</code> ）。小数点两边必须有至少一个十进制数字（或者是十六进制的数字）。</p>
<p>十进制浮点数也可以有一个可选的指数（exponent)，通过大写或者小写的 <code>e</code> 来指定；十六进制浮点数必须有一个指数，通过大写或者小写的 <code>p</code> 来指定。</p>
<p>如果一个十进制数的指数为 <code>exp</code>，那这个数相当于基数和10^exp 的乘积：</p>
<ul>
<li><code>1.25e2</code> 表示 1.25 × 10^2，等于 <code>125.0</code>。</li>
<li><code>1.25e-2</code> 表示 1.25 × 10^-2，等于 <code>0.0125</code>。</li>
</ul>
<p>如果一个十六进制数的指数为 <code>exp</code>，那这个数相当于基数和2^exp 的乘积：</p>
<ul>
<li><code>0xFp2</code> 表示 15 × 2^2，等于 <code>60.0</code>。</li>
<li><code>0xFp-2</code> 表示 15 × 2^-2，等于 <code>3.75</code>。</li>
</ul>
<p>下面的这些浮点字面量都等于十进制的 <code>12.1875</code>：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> decimalDouble = <span style="color:#ae81ff">12.1875</span>
<span style="color:#66d9ef">let</span> exponentDouble = <span style="color:#ae81ff">1.21875e1</span>
<span style="color:#66d9ef">let</span> hexadecimalDouble = <span style="color:#ae81ff">0xC</span>.<span style="color:#ae81ff">3</span>p0
</code></pre></div><blockquote>
<p>整数和浮点数都可以添加额外的零并且包含下划线，并不会影响字面量：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> paddedDouble = <span style="color:#ae81ff">000123.456</span>
<span style="color:#66d9ef">let</span> oneMillion = <span style="color:#ae81ff">1_000_000</span>
<span style="color:#66d9ef">let</span> justOverOneMillion = <span style="color:#ae81ff">1_000_000.000_000_1</span>
</code></pre></div></blockquote>
<h2 id="数值类型转换">数值类型转换</h2>
<h3 id="整数和浮点数转换">整数和浮点数转换</h3>
<p>整数和浮点数的转换必须显式指定类型：</p>
<p>例如：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> three = <span style="color:#ae81ff">3</span>
<span style="color:#66d9ef">let</span> pointOneFourOneFiveNine = <span style="color:#ae81ff">0.14159</span>
<span style="color:#66d9ef">let</span> pi = Double(three) <span style="color:#f92672">+</span> pointOneFourOneFiveNine
<span style="color:#75715e">// pi 等于 3.14159，所以被推测为 Double 类型</span>
</code></pre></div><p>这个例子中，常量 three 的值被用来创建一个 Double 类型的值，所以加号两边的数类型须相同。如果不进行转换，两者无法相加。</p>
<p>浮点数到整数的反向转换同样行，整数类型可以用 <code>Double</code> 或者 <code>Float</code> 类型来初始化：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> integerPi = Int(pi)
<span style="color:#75715e">// integerPi 等于 3，所以被推测为 Int 类型</span>

<span style="color:#66d9ef">let</span> c = <span style="color:#ae81ff">231.3214353453</span>
<span style="color:#66d9ef">let</span> cc = Int(c)
<span style="color:#75715e">// cc = 231 ，说明重要的在Int上面</span>
</code></pre></div><h2 id="布尔值">布尔值</h2>
<p>Swift 有一个基本的<em>布尔（Boolean）类型</em>，叫做 <code>Bool</code>。布尔值指<em>逻辑</em>上的值，因为它们只能是真或者假。Swift 有两个布尔常量，<code>true</code> 和 <code>false</code>：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> orangesAreOrange = <span style="color:#66d9ef">true</span>
<span style="color:#66d9ef">let</span> turnipsAreDelicious = <span style="color:#66d9ef">false</span>
</code></pre></div><p>就像之前提到的 <code>Int</code> 和 <code>Double</code> 一样，如果你创建变量的时候给它们赋值 <code>true</code> 或者 <code>false</code>，那你不需要将常量或者变量声明为 <code>Bool</code> 类型。</p>
<p>当你编写条件语句比如 <code>if</code> 语句的时候，布尔值非常有用：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">if</span> turnipsAreDelicious {
    print(<span style="color:#e6db74">&#34;Mmm, tasty turnips!&#34;</span>)    <span style="color:#75715e">// 当 turnipsAreDelicious 为 true</span>
} <span style="color:#66d9ef">else</span> {
    print(<span style="color:#e6db74">&#34;Eww, turnips are horrible.&#34;</span>)  <span style="color:#75715e">// 当 turnipsAreDelicious 为 false</span>
}
<span style="color:#75715e">// 输出“Eww, turnips are horrible.”</span>
</code></pre></div><p>可见，在if中使用布尔值，首先判断true，其次是false。</p>
<h2 id="元组">元组</h2>
<p>**元组（tuples）**把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型。</p>
<p>下面这个例子中，(404, &ldquo;Not Found&rdquo;) 是一个描述 HTTP 状态码（HTTP status code）的元组。HTTP 状态码是当你请求网页的时候 web 服务器返回的一个特殊值。如果你请求的网页不存在就会返回一个 404 Not Found 状态码。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> http404Error = (<span style="color:#ae81ff">404</span>, <span style="color:#e6db74">&#34;Not Found&#34;</span>)
<span style="color:#75715e">// http404Error 的类型是 (Int, String)，值是 (404, &#34;Not Found&#34;)</span>
</code></pre></div><p>(404, &ldquo;Not Found&rdquo;) 元组把一个 Int 值和一个 String 值组合起来表示 HTTP 状态码的两个部分：一个数字和一个人类可读的描述。这个元组可以被描述为“一个类型为 (Int, String) 的元组”。</p>
<p>你可以把任意顺序的类型组合成一个元组，这个元组可以包含所有类型。只要你想，你可以创建一个类型为 <code>(Int, Int, Int)</code> 或者 <code>(String, Bool)</code> 或者其他任何你想要的组合的元组。</p>
]]></content>
        </item>
        
    </channel>
</rss>
