<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>萨雷斯煜のDev Note</title>
    <link>https://dev.hanry.top/</link>
    <description>Recent content on 萨雷斯煜のDev Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 18 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dev.hanry.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>初探HTML</title>
      <link>https://dev.hanry.top/posts/2020/09/%E5%88%9D%E6%8E%A2html/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dev.hanry.top/posts/2020/09/%E5%88%9D%E6%8E%A2html/</guid>
      <description>初探HTML HTML骨架标签    标签名 定义 说明     &amp;lt;html&amp;gt;&amp;lt;/html&amp;gt; HTML标签 页面中最大的标签，我们成为根标签   &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; 文档的头部 注意在head标签中我们必须要设置的标签是title   &amp;lt;titile&amp;gt;&amp;lt;/title&amp;gt; 文档的标题 让页面拥有一个属于自己的网页标题   &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt; 文档的主体 元素包含文档的所有内容，页面内容 基本都是放到body里面的    在VS Code中，新建一个.html的文件，输入html:5即可自动生成一个HTML骨架。
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 骨架标签详解 页面语言lang  en：定义页面语言为英语。 zh-CN：定义页面语言为中文。  头标签head 头标签内部的常见标签如下：
 &amp;lt;title&amp;gt;：指定整个网页的标题，在浏览器最上方显示。 &amp;lt;base&amp;gt;：为页面上的所有链接规定默认地址或默认目标。 &amp;lt;meta&amp;gt;：提供有关页面的基本信息 &amp;lt;body&amp;gt;：用于定义HTML文档所要显示的内容，也称为主体标签。我们所写的代码必须放在此标签內。 &amp;lt;link&amp;gt;：定义文档与外部资源的关系。  </description>
    </item>
    
    <item>
      <title>Swift5.1函数笔记</title>
      <link>https://dev.hanry.top/posts/2020/09/swift5.1%E5%87%BD%E6%95%B0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dev.hanry.top/posts/2020/09/swift5.1%E5%87%BD%E6%95%B0%E7%AC%94%E8%AE%B0/</guid>
      <description>函数本质是什么 函数本质是用来复用一段代码
如何定义函数 函数定义使用func，以 func 作为前缀。指定函数返回类型时，用返回箭头 -&amp;gt;（一个连字符后跟一个右尖括号）后跟返回类型的名称的方式来表示。
基本语法是:
func name(lastname: String, firstname: String) -&amp;gt; String{ ... } 意思是：
func 函数名(参数一: 类型, 参数二: 类型, 以此类推) -&amp;gt; 返回值类型 { ... } 参数 参数的定义需要有名字和类型
无参数函数 函数是可以没有参数的，当函数没有参数时，在函数名后还是需要一对圆括号。当被调用时，也需要在函数名后写一对圆括号。
例如：
func sayHelloWorld() -&amp;gt; String { return &amp;#34;hello, world&amp;#34; } print(sayHelloWorld()) // 打印“hello, world” 参数标签 每个函数参数都有一个参数标签（argument label）以及一个参数名称（parameter name），参数标签本质上是指向参数名称的。
默认情况下，函数参数使用参数名称来作为它们的参数标签。
如何指定参数标签 在参数名称前指定它的参数标签，中间以空格分隔
例如：
func gotowork(at time: String) { //at就是参数标签，time就是参数名称 print(&amp;#34;this time is \(time)&amp;#34;) } gotowork(at: &amp;#34;8:00&amp;#34;) // 输出this time is 8:00 //有了参数标签，有时会让代码更易读 调用函数读起来go to work at 8:00  调用函数的参数也是可以没有标签的，只需要在函数中定义参数时前面加一个_，即可忽略参数标签</description>
    </item>
    
    <item>
      <title>Swift5.1基础运算符</title>
      <link>https://dev.hanry.top/posts/2020/08/swift5.1%E5%9F%BA%E7%A1%80%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dev.hanry.top/posts/2020/08/swift5.1%E5%9F%BA%E7%A1%80%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>术语 运算符分为一元、二元和三元运算符：
 一元运算符是对单一对象操作（例如+a, !b, c!） 二元运算符是对两个对象操作（例如a + b, a - b） 三元运算符是对三个对象操作，swift中只有一个就是a ? b : c   三元运算符意思是问题 ? 答案 1 : 答案 2，后文会讲到
 赋值运算符 赋值运算符（a = b），表示用 b 的值来初始化或更新 a 的值：
let b = 10 var a = 5 a = b // a 现在等于 10 let (x, y) = (1, 2) // 现在 x 等于 1，y 等于 2 算数运算符 + - × ÷，大家都懂
求余运算符 a &amp;amp; b 计算 b的多少倍刚刚好可以容入a，返回来多的数。</description>
    </item>
    
    <item>
      <title>Swift5.1基础笔记</title>
      <link>https://dev.hanry.top/posts/2020/08/swift5.1%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dev.hanry.top/posts/2020/08/swift5.1%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</guid>
      <description>常量和变量 常量声明let
变量声明var
例如：
let maximumNumberOfLoginAttempts = 10 var currentLoginAttempt = 0 可以在一行中声明多个变量，类似C
例如：
var a = 1 , b = 2 , c = 3  ⚠️一般不变的值用常量let,var只声明会变化的值，防止出错
 类型注解 类型注解是声明常量或者变量的时候，说明常量或者变量中要存储的值的类型。
如果要添加类型注解，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。
例如：
var welcomeMessage: String //说明 在此声明的 welcomeMessage 只能为String类型 //welcomeMessage 可以设置为任意字符串 welcomeMessage = &amp;#34;Hello world&amp;#34; ✔️ welcomeMessage = &amp;#34;12&amp;#34; ✔️ welcomeMessage = 12 ❌ 同样，你可以在一行中定义多个变量，最后一个变量名后面添加类型注解：
var yellow, green, blue: Double  ⚠️正常情况下很少需要类型注解，Swift可以推断出这个，除非在明确要限制变量类型的情况下，一般不需要添加
 常量和变量的命名 常量和变量名可以包含任何字符，包括 Unicode 字符：常量和变量名可以包含任何字符，包括 Unicode 字符：</description>
    </item>
    
  </channel>
</rss>